using System;
using System.Collections.Generic;
using System.Linq;

namespace homework
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Market market = new Market();
            market.Work();
        }
    }

    class Market
    {
        private Seller _seller;
        private Visitor _visitor;

        public Market()
        {
            _seller = new Seller(new List<Product>
         {
            new Product("Хлеб", 20),
            new Product("Молоко", 150),
            new Product("Яйца", 60),
            new Product("Курица", 260),
            new Product("Сыр", 120),
            new Product("Помидоры", 30),
            new Product("Огурцы", 16)
         }, 0);

            _visitor = new Visitor(300);
        }

        public void Work()
        {
            const string CommandAddProductToCart = "1";
            const string CommandRemoveProductFromCart = "2";
            const string CommandPay = "3";
            const string CommandQuit = "0";

            bool isRun = true;

            while (isRun == true)
            {
                _seller.ShowAllProducts();
                _seller.ShowWallet();
                _visitor.ShowWallet();
                _visitor.ShowCart();

                Console.WriteLine("Меню:");
                Console.WriteLine($"{CommandAddProductToCart}. Добавить товар в корзину");
                Console.WriteLine($"{CommandRemoveProductFromCart}. Убрать продукт из корзины");
                Console.WriteLine($"{CommandPay}. Оплатить корзину");
                Console.WriteLine($"{CommandQuit}. Выйти");
                Console.Write("Выберите действие: ");

                string input = Console.ReadLine();

                switch (input)
                {
                    case CommandAddProductToCart:
                        AddProductToCart();
                        break;

                    case CommandRemoveProductFromCart:
                        RemoveProductFromCart();
                        break;

                    case CommandPay:
                        Pay();
                        break;

                    case CommandQuit:
                        isRun = false;
                        break;

                    default:
                        Console.WriteLine("Неверный выбор");
                        break;
                }
            }
        }

        private void AddProductToCart()
        {
            Console.WriteLine("\nВведите название товара для добавления в корзину.");
            string userInput = Console.ReadLine();

            Product selectedProduct = _seller.GetProductByName(userInput);
            if (selectedProduct != null)
            {
                _visitor.AddProduct(selectedProduct);
            }
            else
            {
                Console.WriteLine("Товар не найден");
            }
        }

        private void RemoveProductFromCart()
        {
            Console.WriteLine("\nВведите название товара для удаления из корзины:");
            string userInput = Console.ReadLine();

            Product selectedProduct = _visitor.GetProductByName(userInput);
            if (selectedProduct != null)
            {
                _visitor.RemoveProduct(selectedProduct);
            }
            else
            {
                Console.WriteLine("Товар не найден в корзине");
            }
        }

        private void Pay()
        {
            int cartPrice = _visitor.CalculateTotalPrice();

            if (_visitor.IsEnoughMoney(cartPrice))
            {
                _visitor.GiveMoney(cartPrice);
                _seller.TakeMoney(cartPrice);
                _visitor.ClearCart();

                Console.WriteLine("\nОплата прошла успешно!");
            }
            else
            {
                Console.WriteLine("\nНедостаточно средств для оплаты!");
            }

            Console.WriteLine("\nНажмите любую клавишу для продолжения...");
            Console.ReadKey();
        }
    }

    class Npc
    {
        public List<Product> _products;

        public Npc(List<Product> products, int wallet)
        {
            _products = products;
            Wallet = wallet;
        }

        public int Wallet { get; protected set; }
        public List<Product> Products => _products;
    }
    class Seller : Npc
    {
        public Seller(List<Product> products, int wallet) : base(products, wallet) { }

        public void ShowAllProducts()
        {
            Console.WriteLine("Товарный ряд:");
            foreach (var product in _products)
            {
                product.ShowInfo();
            }
        }

        public Product? GetProductByName(string name)
        {
            return _products.FirstOrDefault(product => product.Name.ToLower() == name.ToLower());
        }

        public void TakeMoney(int productPrice)
        {
            Wallet += productPrice;
        }

        public void ShowWallet()
        {
            Console.WriteLine($"В кассе {Wallet} руб.");
        }
    }

    class Visitor : Npc
    {
        private List<Product> _cart = new List<Product>();

        public Visitor(int wallet) : base(new List<Product>(), wallet) { }

        public void AddProduct(Product product)
        {
            _cart.Add(product);
        }

        public void RemoveProduct(Product product)
        {
            _cart.Remove(product);
        }

        public Product? GetProductByName(string name)
        {
            return _cart.FirstOrDefault(product => product.Name.ToLower() == name.ToLower());
        }

        public void ShowCart()
        {
            Console.WriteLine("------------------------------------------------------------------------------");
            Console.WriteLine("Корзина: ");

            foreach (var product in _cart)
            {
                product.ShowInfo();
            }

            Console.WriteLine($" К оплате: {CalculateTotalPrice} руб.");
            Console.WriteLine("------------------------------------------------------------------------------");
        }
        
        public int CalculateTotalPrice()
        {
            int total = 0;
            foreach (Product product in _cart)
            {
                total += product.Price;
            }
            return total;
        }

        public void ClearCart()
        {
            _cart.Clear();
        }

        public void ShowWallet()
        {
            Console.WriteLine($"\n\nУ вас {Wallet} руб.");
        }

        public bool IsEnoughMoney(int price)
        {
            return Wallet >= price;
        }

        public void GiveMoney(int productPrice)
        {
            Wallet -= productPrice;
        }
    }

    class Product
    {
        public string Name { get; private set; }
        public int Price { get; private set; }

        public Product(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public void ShowInfo()
        {
            Console.WriteLine($" {Name}. ({Price} руб.)");
        }
    }
}
