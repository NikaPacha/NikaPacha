using System;

namespace TryParse
{
    internal class Programm
    {
        static void Main(string[] args)
        {
            Console.CursorVisible = false;

            int startPositionX = 1;
            int startPositionY = 1;

            char heroSymbol = '@';
            char wallSymbol = '#';
            char coinSymbol = '°';
            char freeMapSymbol = ' ';

            int mapWeight = 20;
            int mapHeight = 10;

            char[,] map;
            map = MapGenerator(mapHeight, mapWeight, wallSymbol, coinSymbol, freeMapSymbol);

            int mapCoins;
            int bagCoin = 0;
            mapCoins = GetCoinsCount(map);

            int[] heroPosition = SpawnHero(startPositionX, startPositionY);


            while (mapCoins > bagCoin)
            {
                Console.Clear();

                Console.SetCursorPosition(mapWeight + 1, 0);
                Console.WriteLine($"Score: {bagCoin}");

                Console.SetCursorPosition(0, 0);
                DrawMap(map);

                Console.SetCursorPosition(heroPosition[0], heroPosition[1]);
                Console.WriteLine(heroSymbol);

                MoveHero(ref map, ref heroPosition, wallSymbol);
                SelectionCoin(ref bagCoin, ref map, heroPosition, coinSymbol, freeMapSymbol);
            }

            Console.Clear();
            Console.SetCursorPosition(0, 0);
            Console.WriteLine("Поздравляю! Вы собрали все монеты");
        }

        static char[,] MapGenerator(int mapHeight, int mapWeight, char wallSymbol, char coinSymbol, char freeMapSymbol)
        {
            int minRandomValue = 0;
            int maxRandomValue = 10;

            int mapIndex;
            int valueForWall = 1;
            int valueForCoin = 4;

            char[,] map = new char[mapHeight, mapWeight];

            Random random = new Random();

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    mapIndex = random.Next(minRandomValue, maxRandomValue);

                    if (j == 0 || j == map.GetLength(1) - 1 || i == 0 || i == map.GetLength(0) - 1 || mapIndex == valueForWall)
                    {
                        map[i, j] = wallSymbol;
                    }
                    else if (mapIndex % valueForCoin == 0)
                    {
                        map[i, j] = coinSymbol;
                    }
                    else
                    {
                        map[i, j] = freeMapSymbol;
                    }
                }
            }

            return map;
        }

        static int[] SpawnHero(int startPositionX, int startPositionY)
        {
            int[] position = { startPositionX, startPositionY };

            return position;
        }

        static int GetCoinsCount(char[,] map)
        {
            int mapCoins = 0;

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    if (map[i, j] == '°')
                    {
                        mapCoins++;
                    }
                }
            }

            return mapCoins;
        }

        static void MoveHero(ref char[,] map, ref int[] heroPosition, char wallSymbol)
        {
            int nextHeroPositionX;
            int nextHeroPositionY;

            int[] direction;
            GetDirection(out direction);

            nextHeroPositionX = heroPosition[0] + direction[0];
            nextHeroPositionY = heroPosition[1] + direction[1];

            if (map[nextHeroPositionY, nextHeroPositionX] != wallSymbol)
            {
                heroPosition[0] = nextHeroPositionX;
                heroPosition[1] = nextHeroPositionY;
            }
        }

        static void SelectionCoin(ref int bagCoin, ref char[,] map, int[] heroPosition, char coinSymbol, char freeMapSymbol)
        {
            if (map[heroPosition[1], heroPosition[0]] == coinSymbol)
            {
                map[heroPosition[1], heroPosition[0]] = freeMapSymbol;
                bagCoin++;
            }
        }

        static void GetDirection(out int[] direction)
        {
            ConsoleKeyInfo key = Console.ReadKey();
            direction = new int[2];

            switch (key.Key)
            {
                case ConsoleKey.UpArrow:
                    direction[1] = -1;
                    break;

                case ConsoleKey.DownArrow:
                    direction[1] = 1;
                    break;

                case ConsoleKey.LeftArrow:
                    direction[0] = -1;
                    break;

                case ConsoleKey.RightArrow:
                    direction[0] = 1;
                    break;
            }
        }

        static void DrawMap(char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }

                Console.WriteLine();
            }
        }
    }
}
