using System;
using System.Collections.Generic;

namespace уроки
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Deck deck = new Deck();
            Crupier crupier = new Crupier();
            Player player = new Player();

            Console.WriteLine("Карты в колоде: ");

            deck.ShowDeck();

            crupier.Play();
        }
    }

    class Crupier
    {
        private Player _player = new Player();
        private Deck _deck = new Deck();

        public void Play()
        {
            List<Card> cards = new List<Card>();

            Console.Write("\nКоличество карт запрашиваемых у диллера: ");
            int cardsCount = Card.Utils.ReadInt();

            cards.AddRange(TakeCards(cardsCount));

            _player.TakeCard(cards);
        }

        private List<Card> TakeCards(int cardsCount)
        {
            List<Card> cards = new List<Card>();

            if (_deck.AcceptQuantityCards < cardsCount)
                cardsCount = _deck.AcceptQuantityCards;

            for (int i = 0; i < cardsCount; i++)
                cards.Add(_deck.GiveCard());

            return cards;
        }
    }

    class Player
    {
        private List<Card> _cards = new List<Card>();
    
        public void TakeCard(List<Card> cards)
        {
            _cards.AddRange(cards);

            ShowPlayerCards();
        }

        private void ShowPlayerCards()
        {
            Console.WriteLine("Ваши карты: ");
            foreach (Card cards in _cards)
            {
                Console.WriteLine($"{cards.Suit} - {cards.Ranks}.");
            }
        }
    }

    class Deck
    {
        private List<Card> _cards = new List<Card>();
        

        public Deck()
        {
            string[] suits = { "Черви", "Буби", "Пики", "Крести" };
            string[] ranks = { "6", "7", "8", "9", "10", "Валет", "Дама", "Король", "Туз" };

            foreach (var suit in suits)
            {
                foreach (var rank in ranks)
                {
                    _cards.Add(new Card(suit, rank));
                }
            }
        }
        public int AcceptQuantityCards => _cards.Count;

        public Card GiveCard()
        {
            Shuffle();

            int indexFirstCard = 0;

            Card card = _cards[indexFirstCard];
            _cards.Remove(card);

            return card;
        }

        public void ShowDeck()
        {
            foreach (Card card in _cards)
            {
                Console.Write($"| {card.Suit} {card.Ranks} |");
            }

        }
        private void Shuffle()
        {
            int randomNumber;

            for (int i = _cards.Count - 1; i >= 0; i--)
            {
                randomNumber = Card.Utils.GetRandomNumber(i);

                Card firstCard = _cards[randomNumber];
                Card secondCard = _cards[i];

                _cards[i] = firstCard;
                _cards[randomNumber] = secondCard;
            }
        }

    }

    class Card
    {
        public Card(string ranks, string suit)
        {
            Ranks = ranks;
            Suit = suit;
        }

        public string Ranks { get; private set; }
        public string Suit { get; private set; }

        public static class Utils
        {
            static private Random s_random = new Random();

            public static int GetRandomNumber(int maxValue) => s_random.Next(maxValue);

            public static int ReadInt()
            {
                int number;

                while (int.TryParse(Console.ReadLine(), out number) == false)
                    Console.WriteLine("Ошибка! Неверный ввод, требуется целое положительное число.");

                return number;
            }
        }
    }

} 
